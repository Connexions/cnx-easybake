// Test counters
ul {
  counter-reset: lights, cardassian-lights, my-lights -1;
  counter-reset: my-food 0;
  string-set: lname "This is the food and light list";
  }

li {
   counter-increment: items;
   }

li[data-type='light'] {
    counter-increment: lights;
    counter-increment: my-lights;
    &:not(:first-of-type) {
        counter-increment: cardassian-lights;
    }
}
li[data-type='food'] {
    counter-increment: my-food 500;
    class: "food-" target-counter(burger, items);
}

body::before {
    content: "Hint, the food is at item #" target-counter("burger", items)  " And maybe at #" target-counter("fries", items) "And has a title:" target-string(mylist, lname);
    }
body::after {
    content: "There are " counter(cardassian-lights) " lights!"
    }
body::after {
    content: "There are " counter(lights) " lights!"
    }
body::after {
    content: "There are " counter(my-lights) " lights!"
    }
body::after {
    content: "There are " counter(my-food) " calories!"
    }
// LOG: cnx-easybake DEBUG default body content "Hint, the food is at item #" target-counter("burger", items) " And maybe at #" target-counter("fries", items) "And has a title:" target-string(mylist, lname)
// LOG: cnx-easybake DEBUG default ul counter-reset lights, cardassian-lights, my-lights -1
// LOG: cnx-easybake DEBUG default ul counter-reset my-food 0
// LOG: cnx-easybake DEBUG default ul string-set  lname "This is the food and light list"
// LOG: cnx-easybake DEBUG default li counter-increment items
// LOG: cnx-easybake DEBUG default li counter-increment lights
// LOG: cnx-easybake DEBUG default li counter-increment my-lights
// LOG: cnx-easybake DEBUG default li counter-increment items
// LOG: cnx-easybake DEBUG default li counter-increment my-food 500
// LOG: cnx-easybake DEBUG default li class "food-" target-counter(burger, items)
// LOG: cnx-easybake DEBUG default li counter-increment items
// LOG: cnx-easybake DEBUG default li counter-increment lights
// LOG: cnx-easybake DEBUG default li counter-increment my-lights
// LOG: cnx-easybake DEBUG default li counter-increment cardassian-lights
// LOG: cnx-easybake DEBUG default li counter-increment items
// LOG: cnx-easybake DEBUG default li counter-increment lights
// LOG: cnx-easybake DEBUG default li counter-increment my-lights
// LOG: cnx-easybake DEBUG default li counter-increment cardassian-lights
// LOG: cnx-easybake DEBUG default li counter-increment items
// LOG: cnx-easybake DEBUG default li counter-increment lights
// LOG: cnx-easybake DEBUG default li counter-increment my-lights
// LOG: cnx-easybake DEBUG default li counter-increment cardassian-lights
// LOG: cnx-easybake DEBUG default body content "There are " counter(cardassian-lights) " lights!"
// LOG: cnx-easybake DEBUG default body content "There are " counter(lights) " lights!"
// LOG: cnx-easybake DEBUG default body content "There are " counter(my-lights) " lights!"
// LOG: cnx-easybake DEBUG default body content "There are " counter(my-food) " calories!"
// LOG: cnx-easybake DEBUG Recipe default length: 35
// LOG: cnx-easybake WARNING Bad ID target lookup fries
