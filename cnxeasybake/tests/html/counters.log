cnx-easybake DEBUG Passes: ['default']
cnx-easybake DEBUG Rule (21): body::before 
cnx-easybake DEBUG     default: content "Hint, the food is at item #" target-counter("#burger", items) " And maybe at #" target-counter("#" attr(foodid), items) "And has a title:" target-string("#mylist", lname)
cnx-easybake DEBUG IdentToken as string: items
cnx-easybake DEBUG IdentToken as string: items
cnx-easybake DEBUG IdentToken as string: lname
cnx-easybake DEBUG Rule (1): ul 
cnx-easybake DEBUG     default: counter-reset lights, cardassian-lights, my-lights -1
cnx-easybake DEBUG     default: counter-reset my-food 0
cnx-easybake DEBUG     default: string-set lname "This is the food and light list"
cnx-easybake DEBUG     default: attr-title string(lname)
cnx-easybake DEBUG IdentToken as string: lname
cnx-easybake DEBUG Rule (7): li 
cnx-easybake DEBUG     default: counter-increment items
cnx-easybake DEBUG Rule (10): li[data-type="light"] 
cnx-easybake DEBUG     default: counter-increment lights
cnx-easybake DEBUG     default: counter-increment my-lights
cnx-easybake DEBUG Rule (7): li 
cnx-easybake DEBUG     default: counter-increment items
cnx-easybake DEBUG Rule (17): li[data-type="food"] 
cnx-easybake DEBUG     default: counter-increment my-food 500
cnx-easybake DEBUG     default: class "food-" target-counter("#burger", items)
cnx-easybake DEBUG IdentToken as string: items
cnx-easybake DEBUG Rule (7): li 
cnx-easybake DEBUG     default: counter-increment items
cnx-easybake DEBUG Rule (10): li[data-type="light"] 
cnx-easybake DEBUG     default: counter-increment lights
cnx-easybake DEBUG     default: counter-increment my-lights
cnx-easybake DEBUG Rule (14): li[data-type="light"]:not(:first-of-type) 
cnx-easybake DEBUG     default: counter-increment cardassian-lights
cnx-easybake DEBUG Rule (7): li 
cnx-easybake DEBUG     default: counter-increment items
cnx-easybake DEBUG Rule (10): li[data-type="light"] 
cnx-easybake DEBUG     default: counter-increment lights
cnx-easybake DEBUG     default: counter-increment my-lights
cnx-easybake DEBUG Rule (14): li[data-type="light"]:not(:first-of-type) 
cnx-easybake DEBUG     default: counter-increment cardassian-lights
cnx-easybake DEBUG Rule (7): li 
cnx-easybake DEBUG     default: counter-increment items
cnx-easybake DEBUG Rule (17): li[data-type="food"] 
cnx-easybake DEBUG     default: counter-increment my-food 500
cnx-easybake DEBUG     default: class "food-" target-counter("#burger", items)
cnx-easybake DEBUG IdentToken as string: items
cnx-easybake DEBUG Rule (7): li 
cnx-easybake DEBUG     default: counter-increment items
cnx-easybake DEBUG Rule (10): li[data-type="light"] 
cnx-easybake DEBUG     default: counter-increment lights
cnx-easybake DEBUG     default: counter-increment my-lights
cnx-easybake DEBUG Rule (14): li[data-type="light"]:not(:first-of-type) 
cnx-easybake DEBUG     default: counter-increment cardassian-lights
cnx-easybake DEBUG Rule (24): body::after 
cnx-easybake DEBUG     default: content "There are " counter(cardassian-lights) " lights!"
cnx-easybake DEBUG Rule (27): body::after 
cnx-easybake DEBUG     default: content "There are " counter(lights) " lights!"
cnx-easybake DEBUG Rule (30): body::after 
cnx-easybake DEBUG     default: content "There are " counter(my-lights) " lights!"
cnx-easybake DEBUG Rule (33): body::after 
cnx-easybake DEBUG     default: content "There are " counter(my-food) " calories!"
cnx-easybake DEBUG Rule (36): body::after 
cnx-easybake DEBUG     default: content "There are " counter(my-food, upper-roman) " calories!, " counter(lights, upper-latin) ", " counter(cardassian-lights, lower-latin)
cnx-easybake DEBUG Recipe default length: 48
